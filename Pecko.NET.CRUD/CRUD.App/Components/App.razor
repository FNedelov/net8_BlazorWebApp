@using CRUD.Common.DTOs;
@using CRUD.App.Classes;
@using Microsoft.AspNetCore.Components.Authorization
@inject CustomAuthenticationStateProvider provider

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="CRUD.App.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
</body>

</html>

@code {
    public const string ROLE_ADMIN = "Admin";
    public const string ROLE_USER = "User";
    public const string SYSTEM = "System";
    public const string UNKNOWN = "Unknown";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetClaimsPrincipalData();
        }
        catch (Exception ex)
        {
        }
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await provider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        // if (user.Identity is not null && user.Identity.IsAuthenticated)
        // {
        //     authMessage = $"{user.Identity.Name} is authenticated.";
        //     claims = user.Claims;
        //     surname = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
        // }
        // else
        // {
        //     authMessage = "The user is NOT authenticated.";
        // }
    }
}